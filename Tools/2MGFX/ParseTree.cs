// Generated by TinyPG v1.3 available at www.codeproject.com

using System;
using System.Collections.Generic;
using System.Text;
using System.Xml.Serialization;
using Microsoft.Xna.Framework.Graphics;

namespace TwoMGFX
{
    #region ParseTree
    [Serializable]
    public class ParseErrors : List<ParseError>
    {
    }

    [Serializable]
    public class ParseError
    {
        private string file;
        private string message;
        private int code;
        private int line;
        private int col;
        private int pos;
        private int length;

        public string File { get { return file; } }
        public int Code { get { return code; } }
        public int Line { get { return line; } }
        public int Column { get { return col; } }
        public int Position { get { return pos; } }
        public int Length { get { return length; } }
        public string Message { get { return message; } }

        // just for the sake of serialization
        public ParseError()
        {
        }

        public ParseError(string message, int code, ParseNode node) : this(message, code, node.Token)
        {
        }

        public ParseError(string message, int code, Token token) : this(message, code, token.File, token.Line, token.Column, token.StartPos, token.Length)
        {
        }

        public ParseError(string message, int code) : this(message, code, string.Empty, 0, 0, 0, 0)
        {
        }

        public ParseError(string message, int code, string file, int line, int col, int pos, int length)
        {
            this.file = file;
            this.message = message;
            this.code = code;
            this.line = line;
            this.col = col;
            this.pos = pos;
            this.length = length;
        }
    }

    // rootlevel of the node tree
    [Serializable]
    public partial class ParseTree : ParseNode
    {
        public ParseErrors Errors;

        public List<Token> Skipped;

        public ParseTree() : base(new Token(), "ParseTree")
        {
            Token.Type = TokenType.Start;
            Token.Text = "Root";
            Errors = new ParseErrors();
        }

        public string PrintTree()
        {
            StringBuilder sb = new StringBuilder();
            int indent = 0;
            PrintNode(sb, this, indent);
            return sb.ToString();
        }

        private void PrintNode(StringBuilder sb, ParseNode node, int indent)
        {
            
            string space = "".PadLeft(indent, ' ');

            sb.Append(space);
            sb.AppendLine(node.Text);

            foreach (ParseNode n in node.Nodes)
                PrintNode(sb, n, indent + 2);
        }
        
        /// <summary>
        /// this is the entry point for executing and evaluating the parse tree.
        /// </summary>
        /// <param name="paramlist">additional optional input parameters</param>
        /// <returns>the output of the evaluation function</returns>
        public object Eval(params object[] paramlist)
        {
            return Nodes[0].Eval(this, paramlist);
        }
    }

    [Serializable]
    [XmlInclude(typeof(ParseTree))]
    public partial class ParseNode
    {
        protected string text;
        protected List<ParseNode> nodes;
        
        public List<ParseNode> Nodes { get {return nodes;} }
        
        [XmlIgnore] // avoid circular references when serializing
        public ParseNode Parent;
        public Token Token; // the token/rule

        [XmlIgnore] // skip redundant text (is part of Token)
        public string Text { // text to display in parse tree 
            get { return text;} 
            set { text = value; }
        } 

        public virtual ParseNode CreateNode(Token token, string text)
        {
            ParseNode node = new ParseNode(token, text);
            node.Parent = this;
            return node;
        }

        protected ParseNode(Token token, string text)
        {
            this.Token = token;
            this.text = text;
            this.nodes = new List<ParseNode>();
        }

        protected object GetValue(ParseTree tree, TokenType type, int index)
        {
            return GetValue(tree, type, ref index);
        }

        protected object GetValue(ParseTree tree, TokenType type, ref int index)
        {
            object o = null;
            if (index < 0) return o;

            // left to right
            foreach (ParseNode node in nodes)
            {
                if (node.Token.Type == type)
                {
                    index--;
                    if (index < 0)
                    {
                        o = node.Eval(tree);
                        break;
                    }
                }
            }
            return o;
        }

        /// <summary>
        /// this implements the evaluation functionality, cannot be used directly
        /// </summary>
        /// <param name="tree">the parsetree itself</param>
        /// <param name="paramlist">optional input parameters</param>
        /// <returns>a partial result of the evaluation</returns>
        internal object Eval(ParseTree tree, params object[] paramlist)
        {
            object Value = null;

            switch (Token.Type)
            {
                case TokenType.Start:
                    Value = EvalStart(tree, paramlist);
                    break;
                case TokenType.Technique_Declaration:
                    Value = EvalTechnique_Declaration(tree, paramlist);
                    break;
                case TokenType.Render_State_Expression:
                    Value = EvalRender_State_Expression(tree, paramlist);
                    break;
                case TokenType.Pass_Declaration:
                    Value = EvalPass_Declaration(tree, paramlist);
                    break;
                case TokenType.VertexShader_Pass_Expression:
                    Value = EvalVertexShader_Pass_Expression(tree, paramlist);
                    break;
                case TokenType.PixelShader_Pass_Expression:
                    Value = EvalPixelShader_Pass_Expression(tree, paramlist);
                    break;
                case TokenType.AddressMode_Clamp:
                    Value = EvalAddressMode_Clamp(tree, paramlist);
                    break;
                case TokenType.AddressMode_Wrap:
                    Value = EvalAddressMode_Wrap(tree, paramlist);
                    break;
                case TokenType.AddressMode_Mirror:
                    Value = EvalAddressMode_Mirror(tree, paramlist);
                    break;
                case TokenType.AddressMode:
                    Value = EvalAddressMode(tree, paramlist);
                    break;
                case TokenType.TextureFilter_None:
                    Value = EvalTextureFilter_None(tree, paramlist);
                    break;
                case TokenType.TextureFilter_Linear:
                    Value = EvalTextureFilter_Linear(tree, paramlist);
                    break;
                case TokenType.TextureFilter_Point:
                    Value = EvalTextureFilter_Point(tree, paramlist);
                    break;
                case TokenType.TextureFilter_Anisotropic:
                    Value = EvalTextureFilter_Anisotropic(tree, paramlist);
                    break;
                case TokenType.TextureFilter:
                    Value = EvalTextureFilter(tree, paramlist);
                    break;
                case TokenType.Sampler_State_Texture:
                    Value = EvalSampler_State_Texture(tree, paramlist);
                    break;
                case TokenType.Sampler_State_MinFilter:
                    Value = EvalSampler_State_MinFilter(tree, paramlist);
                    break;
                case TokenType.Sampler_State_MagFilter:
                    Value = EvalSampler_State_MagFilter(tree, paramlist);
                    break;
                case TokenType.Sampler_State_MipFilter:
                    Value = EvalSampler_State_MipFilter(tree, paramlist);
                    break;
                case TokenType.Sampler_State_Filter:
                    Value = EvalSampler_State_Filter(tree, paramlist);
                    break;
                case TokenType.Sampler_State_AddressU:
                    Value = EvalSampler_State_AddressU(tree, paramlist);
                    break;
                case TokenType.Sampler_State_AddressV:
                    Value = EvalSampler_State_AddressV(tree, paramlist);
                    break;
                case TokenType.Sampler_State_AddressW:
                    Value = EvalSampler_State_AddressW(tree, paramlist);
                    break;
                case TokenType.Sampler_State_MaxMipLevel:
                    Value = EvalSampler_State_MaxMipLevel(tree, paramlist);
                    break;
                case TokenType.Sampler_State_MaxAnisotropy:
                    Value = EvalSampler_State_MaxAnisotropy(tree, paramlist);
                    break;
                case TokenType.Sampler_State_MipLodBias:
                    Value = EvalSampler_State_MipLodBias(tree, paramlist);
                    break;
                case TokenType.Sampler_State_Expression:
                    Value = EvalSampler_State_Expression(tree, paramlist);
                    break;
                case TokenType.Sampler_Register_Expression:
                    Value = EvalSampler_Register_Expression(tree, paramlist);
                    break;
                case TokenType.Sampler_Declaration:
                    Value = EvalSampler_Declaration(tree, paramlist);
                    break;

                default:
                    Value = Token.Text;
                    break;
            }
            return Value;
        }

        protected virtual object EvalStart(ParseTree tree, params object[] paramlist)
        {
            var shader = new ShaderInfo();
        
           foreach (var node in Nodes)
              node.Eval(tree, shader);
        
           return shader;
        }

        protected virtual object EvalTechnique_Declaration(ParseTree tree, params object[] paramlist)
        {
            var technique = new TechniqueInfo();
           technique.name = this.GetValue(tree, TokenType.Identifier, 0) as string ?? string.Empty;
           technique.startPos = Token.StartPos;
           technique.length = Token.Length;
        
           foreach (var node in Nodes)
              node.Eval(tree, technique);
           
           // Make sure we have at least one pass.
           if (technique.Passes.Count > 0)
           {
              var shaderInfo = paramlist[0] as ShaderInfo;
              shaderInfo.Techniques.Add(technique);
           }
        
           return null;
        }

        protected virtual object EvalRender_State_Expression(ParseTree tree, params object[] paramlist)
        {
            var name = this.GetValue(tree, TokenType.Identifier, 0) as string;
        	var value = (string)(this.GetValue(tree, TokenType.Identifier, 1) ?? this.GetValue(tree, TokenType.Number, 0));
        	
        	var pass = paramlist[0] as PassInfo;
        	pass.ParseRenderState(name, value);
        		
        	return null;
        }

        protected virtual object EvalPass_Declaration(ParseTree tree, params object[] paramlist)
        {
            var pass = new PassInfo();
           pass.name = this.GetValue(tree, TokenType.Identifier, 0) as string ?? string.Empty;
        
           foreach (var node in Nodes)
              node.Eval(tree, pass);
        
           // We need to have a pixel or vertex shader to keep this pass.
           if (!string.IsNullOrEmpty(pass.psFunction) || !string.IsNullOrEmpty(pass.vsFunction))
           {
              var technique = paramlist[0] as TechniqueInfo;
              technique.Passes.Add(pass);
           }
        
           return null;
        }

        protected virtual object EvalVertexShader_Pass_Expression(ParseTree tree, params object[] paramlist)
        {
            var pass = paramlist[0] as PassInfo;
           pass.vsModel = this.GetValue(tree, TokenType.ShaderModel, 0) as string;
           pass.vsFunction = this.GetValue(tree, TokenType.Identifier, 0) as string;
           return null;
        }

        protected virtual object EvalPixelShader_Pass_Expression(ParseTree tree, params object[] paramlist)
        {
            var pass = paramlist[0] as PassInfo;
           pass.psModel = this.GetValue(tree, TokenType.ShaderModel, 0) as string;
           pass.psFunction = this.GetValue(tree, TokenType.Identifier, 0) as string;
           return null;
        }

        protected virtual object EvalAddressMode_Clamp(ParseTree tree, params object[] paramlist)
        {
            return TextureAddressMode.Clamp;
        }

        protected virtual object EvalAddressMode_Wrap(ParseTree tree, params object[] paramlist)
        {
            return TextureAddressMode.Wrap;
        }

        protected virtual object EvalAddressMode_Mirror(ParseTree tree, params object[] paramlist)
        {
            return TextureAddressMode.Mirror;
        }

        protected virtual object EvalAddressMode(ParseTree tree, params object[] paramlist)
        {
            return this.GetValue(tree, TokenType.AddressMode_Clamp, 0) ?? this.GetValue(tree, TokenType.AddressMode_Wrap, 0) ?? this.GetValue(tree, TokenType.AddressMode_Mirror, 0);
        }

        protected virtual object EvalTextureFilter_None(ParseTree tree, params object[] paramlist)
        {
            return TextureFilterType.None;
        }

        protected virtual object EvalTextureFilter_Linear(ParseTree tree, params object[] paramlist)
        {
            return TextureFilterType.Linear;
        }

        protected virtual object EvalTextureFilter_Point(ParseTree tree, params object[] paramlist)
        {
            return TextureFilterType.Point;
        }

        protected virtual object EvalTextureFilter_Anisotropic(ParseTree tree, params object[] paramlist)
        {
            return TextureFilterType.Anisotropic;
        }

        protected virtual object EvalTextureFilter(ParseTree tree, params object[] paramlist)
        {
            return this.GetValue(tree, TokenType.TextureFilter_None, 0) ?? this.GetValue(tree, TokenType.TextureFilter_Linear, 0) ?? this.GetValue(tree, TokenType.TextureFilter_Point, 0) ?? this.GetValue(tree, TokenType.TextureFilter_Anisotropic, 0);
        }

        protected virtual object EvalSampler_State_Texture(ParseTree tree, params object[] paramlist)
        {
            (paramlist[0] as SamplerStateInfo).TextureName = (string)this.GetValue(tree, TokenType.Identifier, 0); return null;
        }

        protected virtual object EvalSampler_State_MinFilter(ParseTree tree, params object[] paramlist)
        {
            (paramlist[0] as SamplerStateInfo).MinFilter = (TextureFilterType)this.GetValue(tree, TokenType.TextureFilter, 0); return null;
        }

        protected virtual object EvalSampler_State_MagFilter(ParseTree tree, params object[] paramlist)
        {
            (paramlist[0] as SamplerStateInfo).MagFilter = (TextureFilterType)this.GetValue(tree, TokenType.TextureFilter, 0); return null;
        }

        protected virtual object EvalSampler_State_MipFilter(ParseTree tree, params object[] paramlist)
        {
            (paramlist[0] as SamplerStateInfo).MipFilter = (TextureFilterType)this.GetValue(tree, TokenType.TextureFilter, 0); return null;
        }

        protected virtual object EvalSampler_State_Filter(ParseTree tree, params object[] paramlist)
        {
            (paramlist[0] as SamplerStateInfo).Filter = (TextureFilterType)this.GetValue(tree, TokenType.TextureFilter, 0); return null;
        }

        protected virtual object EvalSampler_State_AddressU(ParseTree tree, params object[] paramlist)
        {
            (paramlist[0] as SamplerStateInfo).AddressU = (TextureAddressMode)this.GetValue(tree, TokenType.AddressMode, 0); return null;
        }

        protected virtual object EvalSampler_State_AddressV(ParseTree tree, params object[] paramlist)
        {
            (paramlist[0] as SamplerStateInfo).AddressV = (TextureAddressMode)this.GetValue(tree, TokenType.AddressMode, 0); return null;
        }

        protected virtual object EvalSampler_State_AddressW(ParseTree tree, params object[] paramlist)
        {
            (paramlist[0] as SamplerStateInfo).AddressW = (TextureAddressMode)this.GetValue(tree, TokenType.AddressMode, 0); return null;
        }

        protected virtual object EvalSampler_State_MaxMipLevel(ParseTree tree, params object[] paramlist)
        {
            (paramlist[0] as SamplerStateInfo).MaxMipLevel = ParseTreeTools.ParseInt((string)this.GetValue(tree, TokenType.Number, 0)); return null;
        }

        protected virtual object EvalSampler_State_MaxAnisotropy(ParseTree tree, params object[] paramlist)
        {
            (paramlist[0] as SamplerStateInfo).MaxAnisotropy = ParseTreeTools.ParseInt((string)this.GetValue(tree, TokenType.Number, 0)); return null;
        }

        protected virtual object EvalSampler_State_MipLodBias(ParseTree tree, params object[] paramlist)
        {
            (paramlist[0] as SamplerStateInfo).MipMapLevelOfDetailBias = ParseTreeTools.ParseFloat((string)this.GetValue(tree, TokenType.Number, 0)); return null;
        }

        protected virtual object EvalSampler_State_Expression(ParseTree tree, params object[] paramlist)
        {
            foreach (var node in Nodes)
                node.Eval(tree, paramlist);
            return null;
        }

        protected virtual object EvalSampler_Register_Expression(ParseTree tree, params object[] paramlist)
        {
            return null;
        }

        protected virtual object EvalSampler_Declaration(ParseTree tree, params object[] paramlist)
        {
            if (this.GetValue(tree, TokenType.OpenBracket, 0) == null)
        		return null;
        	
        	var sampler = new SamplerStateInfo();
        	sampler.Name = this.GetValue(tree, TokenType.Identifier, 0) as string;
        	
        	foreach (ParseNode node in Nodes)
        		node.Eval(tree, sampler);
        
        	var shaderInfo = paramlist[0] as ShaderInfo;
        	shaderInfo.SamplerStates.Add(sampler.Name, sampler);
        
        	return null;
        }


    }
    
    #endregion ParseTree
}
